import { atom } from 'nanostores';
import type { DatabaseSummary, MatterProduct } from '../../../../types';
import { getPlatformApi } from '../../platform/api';

export interface ProductDetail {
  id: string;
  productName: string;
  companyName: string;
  certNumber: string;
  lastUpdated?: string;
  [key: string]: any;
}

class DatabaseStore {
  public readonly summary = atom<DatabaseSummary | null>(null);
  public readonly products = atom<MatterProduct[]>([]);
  public readonly loading = atom<boolean>(false);
  public readonly saving = atom<boolean>(false);
  public readonly lastSaveResult = atom<{ success: boolean; message?: string } | null>(null);
  public readonly searchQuery = atom<string>('');
  public readonly currentPage = atom<number>(1);
  public readonly totalPages = atom<number>(0);

  private unsubscribeFunctions: (() => void)[] = [];
  private api = getPlatformApi();

  constructor() {
    this.initializeEventSubscriptions();
  }

  private initializeEventSubscriptions(): void {
    const unsubSummary = this.api.subscribeToEvent('dbSummaryUpdated', (summary: DatabaseSummary) => {
      this.summary.set(summary);
    });
    this.unsubscribeFunctions.push(unsubSummary);
  }

  async loadSummary(): Promise<void> {
    try {
      const summary = await this.api.invokeMethod('getDatabaseSummary');
      if (summary) {
        this.summary.set(summary);
      }
    } catch (error) {
      console.error('Failed to load database summary:', error);
    }
  }

  async saveProducts(products: MatterProduct[]): Promise<void> {
    this.saving.set(true);
    try {
      await this.api.invokeMethod('saveProductsToDatabase', products);
    } catch (error) {
      console.error('Failed to save products:', error);
    } finally {
      this.saving.set(false);
    }
  }

  clearSaveResult(): void {
    this.lastSaveResult.set(null);
  }

  destroy(): void {
    this.unsubscribeFunctions.forEach(unsub => unsub());
    this.unsubscribeFunctions = [];
  }
}

const databaseStore = new DatabaseStore();

export { DatabaseStore, databaseStore };
