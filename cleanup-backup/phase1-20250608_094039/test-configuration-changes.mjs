#!/usr/bin/env node

/**
 * Configuration Changes Test
 * ÏÑ§Ï†ï Î≥ÄÍ≤Ω Í∞êÏßÄ Î∞è Ï†ÄÏû• Î≤ÑÌäº ÌôúÏÑ±Ìôî ÌÖåÏä§Ìä∏
 */

import puppeteer from 'puppeteer';
import { readFileSync } from 'fs';

console.log('üß™ Configuration Changes Test');
console.log('==============================');

let browser, page;

async function setupBrowser() {
  browser = await puppeteer.launch({
    headless: false, // UIÎ•º Î≥¥Í∏∞ ÏúÑÌï¥ headless Î™®Îìú ÎπÑÌôúÏÑ±Ìôî
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  
  page = await browser.newPage();
  await page.setViewport({ width: 1280, height: 800 });
  
  // ÏΩòÏÜî Î°úÍ∑∏ Ï∫°Ï≤ò
  page.on('console', msg => {
    if (msg.type() === 'error' && msg.text().includes('MobX')) {
      console.log('‚ùå MobX Error:', msg.text());
    }
  });
  
  await page.goto('http://localhost:5123', { waitUntil: 'networkidle0' });
}

async function testConfigurationChanges() {
  console.log('\nüìù Testing Configuration Changes...');
  
  try {
    // ÏÑ§Ï†ï ÌÉ≠ÏúºÎ°ú Ïù¥Îèô
    await page.waitForSelector('[data-testid="tab-settings"], .tab[data-tab="settings"], button:contains("ÏÑ§Ï†ï")', { timeout: 5000 });
    
    // ÏÑ§Ï†ï ÌÉ≠ ÌÅ¥Î¶≠ ÏãúÎèÑ (Ïó¨Îü¨ ÏÑ†ÌÉùÏûê ÏãúÎèÑ)
    const settingsTabClicked = await page.evaluate(() => {
      // Ïó¨Îü¨ Î∞©Î≤ïÏúºÎ°ú ÏÑ§Ï†ï ÌÉ≠ Ï∞æÍ∏∞
      const selectors = [
        '[data-testid="tab-settings"]',
        '.tab[data-tab="settings"]',
        'button[data-tab="settings"]',
        '.tab-button[data-tab="settings"]',
        '.tab-settings'
      ];
      
      for (const selector of selectors) {
        const element = document.querySelector(selector);
        if (element) {
          element.click();
          return true;
        }
      }
      
      // ÌÖçÏä§Ìä∏Î°ú Ï∞æÍ∏∞
      const buttons = Array.from(document.querySelectorAll('button, .tab'));
      for (const button of buttons) {
        if (button.textContent?.includes('ÏÑ§Ï†ï')) {
          button.click();
          return true;
        }
      }
      
      return false;
    });
    
    if (settingsTabClicked) {
      console.log('‚úÖ Settings tab clicked');
    } else {
      console.log('‚ö†Ô∏è Could not find settings tab, continuing with current view');
    }
    
    await page.waitForTimeout(1000);
    
    // ÌéòÏù¥ÏßÄ Î≤îÏúÑ Ï†úÌïú ÏûÖÎ†• ÌïÑÎìú Ï∞æÍ∏∞
    const pageRangeInput = await page.waitForSelector('input[type="number"], input[name*="pageRange"], input[name*="limit"]', { timeout: 3000 });
    
    if (pageRangeInput) {
      console.log('‚úÖ Found configuration input field');
      
      // ÌòÑÏû¨ Í∞í Í∞ÄÏ†∏Ïò§Í∏∞
      const originalValue = await page.evaluate(input => input.value, pageRangeInput);
      console.log(`üìä Original value: ${originalValue}`);
      
      // ÏÉà Í∞íÏúºÎ°ú Î≥ÄÍ≤Ω
      const newValue = parseInt(originalValue) + 1;
      await pageRangeInput.click();
      await page.keyboard.selectAll();
      await page.keyboard.type(newValue.toString());
      
      console.log(`üìù Changed value to: ${newValue}`);
      
      // Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ Í∞êÏßÄÎêòÎäîÏßÄ ÌôïÏù∏
      await page.waitForTimeout(500);
      
      // Ï†ÄÏû• Î≤ÑÌäº ÏÉÅÌÉú ÌôïÏù∏
      const saveButtonState = await page.evaluate(() => {
        const saveButtons = Array.from(document.querySelectorAll('button'));
        const saveButton = saveButtons.find(btn => 
          btn.textContent?.includes('Ï†ÄÏû•') || 
          btn.textContent?.includes('Save') ||
          btn.className?.includes('save')
        );
        
        if (saveButton) {
          return {
            found: true,
            enabled: !saveButton.disabled,
            text: saveButton.textContent,
            className: saveButton.className
          };
        }
        
        return { found: false };
      });
      
      if (saveButtonState.found) {
        console.log(`‚úÖ Save button found: "${saveButtonState.text}"`);
        console.log(`üìä Save button enabled: ${saveButtonState.enabled}`);
        
        if (saveButtonState.enabled) {
          console.log('üéâ SUCCESS: Save button is enabled after configuration change!');
          return true;
        } else {
          console.log('‚ùå ISSUE: Save button is still disabled after configuration change');
          return false;
        }
      } else {
        console.log('‚ö†Ô∏è Save button not found');
        return false;
      }
      
    } else {
      console.log('‚ùå Could not find configuration input field');
      return false;
    }
    
  } catch (error) {
    console.log('‚ùå Error during configuration test:', error.message);
    return false;
  }
}

async function checkMobXErrors() {
  console.log('\nüîç Checking for MobX errors...');
  
  const errors = await page.evaluate(() => {
    const errorElements = Array.from(document.querySelectorAll('[class*="error"], .error-message'));
    return errorElements.map(el => el.textContent).filter(text => text?.includes('MobX'));
  });
  
  if (errors.length === 0) {
    console.log('‚úÖ No MobX errors found in UI');
    return true;
  } else {
    console.log('‚ùå MobX errors found:', errors);
    return false;
  }
}

async function runTests() {
  try {
    await setupBrowser();
    
    const results = {
      mobxErrors: await checkMobXErrors(),
      configurationChanges: await testConfigurationChanges()
    };
    
    console.log('\nüìä Test Results:');
    console.log('================');
    console.log(`‚úÖ No MobX Errors: ${results.mobxErrors}`);
    console.log(`‚úÖ Configuration Changes Work: ${results.configurationChanges}`);
    
    const allTestsPassed = Object.values(results).every(result => result);
    
    if (allTestsPassed) {
      console.log('\nüéâ All tests passed! MobX issues have been resolved.');
    } else {
      console.log('\n‚ö†Ô∏è Some tests failed. Please check the issues above.');
    }
    
    // Î∏åÎùºÏö∞Ï†ÄÎ•º Ïó¥Ïñ¥Îë¨ÏÑú ÏàòÎèô ÌÖåÏä§Ìä∏ Í∞ÄÎä•ÌïòÎèÑÎ°ù Ìï®
    console.log('\nüîç Browser left open for manual inspection...');
    console.log('Press Ctrl+C to close when done');
    
    // Ï¢ÖÎ£å Ïã†Ìò∏ ÎåÄÍ∏∞
    process.on('SIGINT', async () => {
      console.log('\nüëã Closing browser...');
      await browser.close();
      process.exit(0);
    });
    
    // Î¨¥Ìïú ÎåÄÍ∏∞
    await new Promise(() => {});
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
    if (browser) {
      await browser.close();
    }
    process.exit(1);
  }
}

runTests();
